{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","preparedGoods","goods","sort","good1","good2","Alphabetically","localeCompare","ByLength","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gCAAAA,E,oBAAAA,E,YAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAhCR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,UAAWE,EACH,EADGA,WAEPE,EAAa,YAAOC,GAqB1B,OAnBIL,GACFI,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKL,EAASc,eACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,SACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXV,GACFE,EAAcS,UAGTT,EAOeU,CACpBlB,EACA,CAAEI,YAAWE,eAGf,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAcL,EAASc,iBAEvCS,QAAS,kBAAMjB,EAAaN,EAASc,iBANvC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAcL,EAASgB,WAEvCO,QAAS,kBAAMjB,EAAaN,EAASgB,WANvC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAaf,IAEjBgB,QAAS,kBAAMf,GAAeD,IANhC,sBAWEF,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,EAAaN,EAASI,SACtBI,GAAc,IALlB,sBAaJ,6BACGC,EAAce,KAAI,SAAAC,GAAI,OACrB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YClHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e57eb906.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetically = 'Alphabetically',\n  ByLength = 'ByLength',\n  Default = '',\n}\ninterface SortState {\n  sortField: SortType;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReversed }: SortState,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Alphabetically:\n          return good1.localeCompare(good2);\n\n        case SortType.ByLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.Default);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const preparedGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortField !== SortType.Alphabetically },\n          )}\n          onClick={() => setSortField(SortType.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortField !== SortType.ByLength },\n          )}\n          onClick={() => setSortField(SortType.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortType.Default);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}